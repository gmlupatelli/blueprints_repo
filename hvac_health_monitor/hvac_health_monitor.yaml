blueprint:
  name: HVAC Health Monitor
  description: >
    Monitors your HVAC system's performance by checking if the temperature
    responds appropriately to heating and cooling cycles. Detects potential 
    issues when the system runs but temperature doesn't change as expected.
    
    ðŸ“‹ SETUP REQUIRED: This blueprint requires 4 Helper Entities and your thermostat 
    must have an 'hvac_action' attribute. See the README.md file in this folder for 
    complete setup instructions and troubleshooting guide.
    
    Required Helper Entities: "input_number.hvac_monitor_start_temp", 
    "input_datetime.hvac_monitor_start_time", "counter.hvac_cooling_failures", 
    "counter.hvac_heating_failures".
  domain: automation
  source_url: https://github.com/gmlupatelli/blueprints_repo/blob/master/hvac_health_monitor/hvac_health_monitor.yaml

  input:
    thermostat:
      name: Thermostat
      description: >
        The thermostat entity to monitor.
        
        IMPORTANT: Your thermostat must have an 'hvac_action' attribute that reports 'heating' 
        or 'cooling' when the system is actively running. Check in Developer Tools > States to 
        verify your thermostat shows hvac_action: heating/cooling/idle.
        
        If your thermostat doesn't have hvac_action or reports different values, this blueprint 
        will not trigger properly.
      selector:
        entity:
          domain: climate

    minimum_runtime:
      name: Minimum Runtime Before Check
      description: How long the system should run before checking effectiveness (in minutes)
      default: 60
      selector:
        number:
          min: 10
          max: 120
          unit_of_measurement: minutes

    cooling_temperature_tolerance:
      name: Cooling Temperature Change Tolerance
      description: >
        Minimum temperature decrease expected during cooling runtime (in degrees Celsius).
        
        IMPORTANT: This value should be SMALLER than your thermostat's deadband (the temperature 
        difference that triggers your AC). Most thermostats have a 0.5-1.5Â°C deadband.
        
        Example: If your AC turns on when room is 0.5Â°C above setpoint, the system will normally 
        cool by about 0.5Â°C before turning off. Set your tolerance to 0.3-0.4Â°C to detect real 
        problems while allowing normal operation.
        
        If tolerance is too high, you'll get false failures. If too low, you might miss real issues.
      default: 0.3
      selector:
        number:
          min: 0.1
          max: 2.0
          step: 0.1
          unit_of_measurement: "Â°C"

    heating_temperature_tolerance:
      name: Heating Temperature Change Tolerance
      description: >
        Minimum temperature increase expected during heating runtime (in degrees Celsius).
        
        IMPORTANT: This value should be SMALLER than your thermostat's deadband (the temperature 
        difference that triggers your heater). Most thermostats have a 0.5-1.5Â°C deadband.
        
        Example: If your heater turns on when room is 0.5Â°C below setpoint, the system will normally 
        heat by about 0.5Â°C before turning off. Set your tolerance to 0.3-0.4Â°C to detect real 
        problems while allowing normal operation.
        
        If tolerance is too high, you'll get false failures. If too low, you might miss real issues.
      default: 0.4
      selector:
        number:
          min: 0.1
          max: 2.0
          step: 0.1
          unit_of_measurement: "Â°C"

    enable_cooling_check:
      name: Enable Cooling Performance Check
      description: Monitor cooling performance
      default: true
      selector:
        boolean:

    enable_heating_check:
      name: Enable Heating Performance Check
      description: Monitor heating performance
      default: true
      selector:
        boolean:

    max_consecutive_failures:
      name: Maximum Consecutive Failures
      description: >
        How many consecutive failures before triggering alert. 
        This counter is reset after a successful heating or cooling cycle.
      default: 4
      selector:
        number:
          min: 1
          max: 10

    cooling_problem_actions:
      name: Cooling Problem Actions
      description: Actions to perform when a cooling issue is detected
      default: []
      selector:
        action: {}

    heating_problem_actions:
      name: Heating Problem Actions
      description: Actions to perform when a heating issue is detected
      default: []
      selector:
        action: {}

# Store user inputs as variables for easier reference throughout the automation
variables:
  thermostat_entity: !input thermostat
  min_runtime: !input minimum_runtime
  cooling_temp_tolerance: !input cooling_temperature_tolerance
  heating_temp_tolerance: !input heating_temperature_tolerance
  max_failures: !input max_consecutive_failures
  enable_cooling_check: !input enable_cooling_check
  enable_heating_check: !input enable_heating_check

# Trigger when thermostat HVAC action changes to heating or cooling
# This monitors the actual system operation, not just the mode setting
trigger:
  - platform: state
    entity_id: !input thermostat
    attribute: hvac_action
    to:
      - 'heating'     # Monitor when heating starts
      - 'cooling'     # Monitor when cooling starts

action:
  # === PHASE 0: VALIDATE TRIGGER ===
  # Ensure this automation was triggered by a proper hvac_action change, not manually
  - condition: template
    value_template: "{{ trigger.to_state is defined and trigger.to_state.attributes.hvac_action in ['heating', 'cooling'] }}"

  # === PHASE 1: CAPTURE INITIAL CONDITIONS ===
  # Record the starting conditions when HVAC begins operating
  - variables:
      hvac_action: "{{ trigger.to_state.attributes.hvac_action }}"                        # Store which hvac_action triggered (heating/cooling)
      current_temp: "{{ state_attr(thermostat_entity, 'current_temperature') | float(0) }}"  # Current room temperature
      target_temp: "{{ state_attr(thermostat_entity, 'temperature') | float(0) }}"           # Thermostat setpoint

  # Ensure we have valid temperature readings before proceeding
  - condition: template
    value_template: >
      {{ current_temp != 0 and target_temp != 0 and 
         state_attr(thermostat_entity, 'current_temperature') is not none and 
         state_attr(thermostat_entity, 'temperature') is not none }}

  # === DEADBAND DETECTION AND VALIDATION ===
  # Calculate the current deadband by measuring how far we are from setpoint
  # This helps detect if user's tolerance settings are appropriate
  - variables:
      estimated_deadband: >
        {% if hvac_action == 'cooling' %}
          {{ (current_temp - target_temp) | abs }}
        {% elif hvac_action == 'heating' %}
          {{ (target_temp - current_temp) | abs }}
        {% else %}
          {{ 0 }}
        {% endif %}

  # === DEADBAND WARNING NOTIFICATIONS ===
  # Warn user if their tolerance settings might cause false failures
  - choose:
    - conditions:
        - condition: template
          value_template: "{{ hvac_action == 'cooling' }}"
        - condition: template
          value_template: "{{ enable_cooling_check }}"
        - condition: template
          value_template: "{{ cooling_temp_tolerance >= estimated_deadband and estimated_deadband > 0.1 }}"
      sequence:
        - service: persistent_notification.create
          data:
            notification_id: "hvac_monitor_cooling_deadband_warning"
            title: "HVAC Monitor: Cooling Tolerance Too High"
            message: >
              Your cooling tolerance ({{ cooling_temp_tolerance }}Â°C) is higher than or equal to your 
              thermostat's current deadband (~{{ estimated_deadband | round(2) }}Â°C).
              
              This will likely cause false failure alerts because your AC will normally stop 
              cooling after only {{ estimated_deadband | round(2) }}Â°C change.
              
              Recommendation: Set your cooling tolerance to {{ (estimated_deadband * 0.7) | round(1) }}Â°C 
              or lower to avoid false alarms.
              
              Current settings: Tolerance={{ cooling_temp_tolerance }}Â°C, Estimated deadband={{ estimated_deadband | round(2) }}Â°C

    - conditions:
        - condition: template
          value_template: "{{ hvac_action == 'heating' }}"
        - condition: template
          value_template: "{{ enable_heating_check }}"
        - condition: template
          value_template: "{{ heating_temp_tolerance >= estimated_deadband and estimated_deadband > 0.1 }}"
      sequence:
        - service: persistent_notification.create
          data:
            notification_id: "hvac_monitor_heating_deadband_warning"
            title: "HVAC Monitor: Heating Tolerance Too High"
            message: >
              Your heating tolerance ({{ heating_temp_tolerance }}Â°C) is higher than or equal to your 
              thermostat's current deadband (~{{ estimated_deadband | round(2) }}Â°C).
              
              This will likely cause false failure alerts because your heater will normally stop 
              heating after only {{ estimated_deadband | round(2) }}Â°C change.
              
              Recommendation: Set your heating tolerance to {{ (estimated_deadband * 0.7) | round(1) }}Â°C 
              or lower to avoid false alarms.
              
              Current settings: Tolerance={{ heating_temp_tolerance }}Â°C, Estimated deadband={{ estimated_deadband | round(2) }}Â°C

  # Store the starting temperature in a helper entity for later comparison
  # This preserves the value even if the automation restarts
  - service: input_number.set_value
    target:
      entity_id: input_number.hvac_monitor_start_temp
    data:
      value: "{{ current_temp }}"

  # Record the exact time when monitoring started
  # Used for debugging and ensuring we wait the full runtime
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.hvac_monitor_start_time
    data:
      datetime: "{{ now() }}"

  # === PHASE 2: WAIT FOR SYSTEM TO OPERATE ===
  # Allow the HVAC system time to work before checking effectiveness
  - delay:
      minutes: "{{ min_runtime }}"

  # === PHASE 3: VERIFY SYSTEM IS STILL AVAILABLE ===
  # Only proceed if the thermostat is available and not turned off
  # This prevents false failures if the system was manually disabled
  - condition: template
    value_template: >
      {% set thermostat_state = states(thermostat_entity) %}
      {% set available = not is_state(thermostat_entity, 'unavailable') %}
      {{ available and thermostat_state != 'off' }}

  # === PHASE 4: CALCULATE TEMPERATURE CHANGE ===
  # Compare current temperature to starting temperature
  - variables:
      new_temp: "{{ state_attr(thermostat_entity, 'current_temperature') | float(0) }}"      # Temperature after runtime
      start_temp: "{{ states('input_number.hvac_monitor_start_temp') | float(0) }}"          # Temperature when started
      temp_change: "{{ new_temp - start_temp }}"                                          # Total change (positive = warmer, negative = cooler)
      current_setpoint: "{{ state_attr(thermostat_entity, 'temperature') | float(0) }}"      # Current thermostat setpoint

  # === PHASE 5: EVALUATE PERFORMANCE AND TAKE ACTION ===
  - choose:
    # *** COOLING FAILURE DETECTION ***
    # Check if cooling system failed to cool adequately
    - conditions:
        - condition: template
          value_template: "{{ hvac_action == 'cooling' }}"                               # This was a cooling cycle
        - condition: template
          value_template: "{{ enable_cooling_check }}"                                   # User enabled cooling monitoring
        - condition: template
          value_template: "{{ temp_change >= -cooling_temp_tolerance }}"                 # Temperature didn't drop enough (failure condition)
      sequence:
        # Increment the consecutive failure counter
        - service: counter.increment
          target:
            entity_id: counter.hvac_cooling_failures
        
        # Only alert if we've reached the maximum consecutive failures
        # This prevents alerts from single anomalies
        - condition: template
          value_template: >
            {{ states('counter.hvac_cooling_failures') | int >= max_failures }}
        
        # Reset the failure counter since we're about to alert
        # Next failure will start counting from 1 again
        - service: counter.reset
          target:
            entity_id: counter.hvac_cooling_failures
        
        # Create a persistent notification for the user
        - service: persistent_notification.create
          data:
            title: "HVAC Cooling Alert"
            message: >
              Cooling issue: Temp only changed {{ temp_change | round(2) }}Â°C after {{ min_runtime }} minutes.
              Expected decrease of at least {{ cooling_temp_tolerance }}Â°C.
        
        # Log the event for historical tracking
        - service: logbook.log
          data:
            name: "HVAC Health Monitor"
            message: >
              Cooling failure detected: Temperature changed only {{ temp_change | round(2) }}Â°C 
              after running for {{ min_runtime }} minutes. Expected at least a {{ cooling_temp_tolerance }}Â°C decrease.
        
        # Execute user-defined actions for cooling problems
        - choose: []
          default: !input cooling_problem_actions

    # *** HEATING FAILURE DETECTION ***
    # Check if heating system failed to heat adequately
    - conditions:
        - condition: template
          value_template: "{{ hvac_action == 'heating' }}"                               # This was a heating cycle
        - condition: template
          value_template: "{{ enable_heating_check }}"                                   # User enabled heating monitoring
        - condition: template
          value_template: "{{ temp_change <= heating_temp_tolerance }}"                  # Temperature didn't rise enough (failure condition)
      sequence:
        # Increment the consecutive failure counter
        - service: counter.increment
          target:
            entity_id: counter.hvac_heating_failures
        
        # Only alert if we've reached the maximum consecutive failures
        # This prevents alerts from single anomalies
        - condition: template
          value_template: >
            {{ states('counter.hvac_heating_failures') | int >= max_failures }}
        
        # Reset the failure counter since we're about to alert
        # Next failure will start counting from 1 again
        - service: counter.reset
          target:
            entity_id: counter.hvac_heating_failures
        
        # Create a persistent notification for the user
        - service: persistent_notification.create
          data:
            title: "HVAC Heating Alert"
            message: >
              Heating issue: Temp only changed {{ temp_change | round(2) }}Â°C after {{ min_runtime }} minutes.
              Expected increase of at least {{ heating_temp_tolerance }}Â°C.
        
        # Log the event for historical tracking
        - service: logbook.log
          data:
            name: "HVAC Health Monitor"
            message: >
              Heating failure detected: Temperature changed only {{ temp_change | round(2) }}Â°C 
              after running for {{ min_runtime }} minutes. Expected at least a {{ heating_temp_tolerance }}Â°C increase.
        
        # Execute user-defined actions for heating problems
        - choose: []
          default: !input heating_problem_actions

    # *** COOLING SUCCESS DETECTION ***
    # Reset failure counter when cooling works properly
    - conditions:
        - condition: template
          value_template: "{{ hvac_action == 'cooling' }}"                               # This was a cooling cycle
        - condition: template
          value_template: "{{ enable_cooling_check }}"                                   # User enabled cooling monitoring
        - condition: or
          conditions:
            # Success Case 1: Temperature dropped more than the minimum tolerance
            - condition: template
              value_template: "{{ temp_change < -cooling_temp_tolerance }}"
            # Success Case 2: System reached setpoint with some cooling (handles deadband scenarios)
            # Even if tolerance wasn't fully met, reaching setpoint indicates proper operation
            - condition: template
              value_template: "{{ new_temp <= current_setpoint and temp_change < 0 }}"
      sequence:
        # Reset consecutive failure counter - system is working properly
        - service: counter.reset
          target:
            entity_id: counter.hvac_cooling_failures
        
        # Clear cooling deadband warning only if cycle was successful
        # This indicates the warning was either incorrect or the user has addressed it
        - service: persistent_notification.dismiss
          data:
            notification_id: "hvac_monitor_cooling_deadband_warning"
          continue_on_error: true

    # *** HEATING SUCCESS DETECTION ***
    # Reset failure counter when heating works properly
    - conditions:
        - condition: template
          value_template: "{{ hvac_action == 'heating' }}"                               # This was a heating cycle
        - condition: template
          value_template: "{{ enable_heating_check }}"                                   # User enabled heating monitoring
        - condition: or
          conditions:
            # Success Case 1: Temperature rose more than the minimum tolerance
            - condition: template
              value_template: "{{ temp_change > heating_temp_tolerance }}"
            # Success Case 2: System reached setpoint with some heating (handles deadband scenarios)
            # Even if tolerance wasn't fully met, reaching setpoint indicates proper operation
            - condition: template
              value_template: "{{ new_temp >= current_setpoint and temp_change > 0 }}"
      sequence:
        # Reset consecutive failure counter - system is working properly
        - service: counter.reset
          target:
            entity_id: counter.hvac_heating_failures
        
        # Clear heating deadband warning only if cycle was successful
        # This indicates the warning was either incorrect or the user has addressed it
        - service: persistent_notification.dismiss
          data:
            notification_id: "hvac_monitor_heating_deadband_warning"
          continue_on_error: true

# Ensure only one instance of this automation runs at a time
# Prevents overlapping monitoring cycles that could interfere with each other
mode: single