blueprint:
  name: ZHA - MOES Wireless Remote Switch (Double Rocker)
  description: >
    Automate your MOES Wireless Remote Switch (Double Rocker) using ZHA events.
    Supports single and double press actions for both left and right buttons.
  domain: automation
  source_url: https://github.com/gmlupatelli/blueprints_repo/blob/master/moes_controler/moes_double_rocker.yaml
  
  # === BLUEPRINT INPUTS ===
  # Configure the MOES device and define actions for each button press type
  input:
    # === DEVICE SELECTION ===
    # Select the specific MOES Double Rocker switch to control
    remote_switch:
      name: Select the MOES Wireless Remote Switch (Double Rocker)
      description: MOES Wireless Remote Switch (Double Rocker)
      selector:
        device:
          integration: zha
          manufacturer: _TZ3000_5e235jpa
          entity:
            domain: sensor
            device_class: battery
    
    # === LEFT BUTTON ACTIONS ===
    # Define what happens when the left button is pressed
    button_single_press_left:
      name: Single Press Left
      description: Action to run on single press
      default: []
      selector:
        action:
    button_double_press_left:
      name: Double Press Left
      description: Action to run on double press
      default: []
      selector:
        action:
    
    # === RIGHT BUTTON ACTIONS ===
    # Define what happens when the right button is pressed
    button_single_press_right:
      name: Single Press Right
      description: Action to run on single press
      default: []
      selector:
        action:
    button_double_press_right:
      name: Double Press Right
      description: Action to run on double press
      default: []
      selector:
        action:

# === AUTOMATION TRIGGERS ===
# Listen for ZHA events from the selected MOES device
trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input remote_switch

# === AUTOMATION ACTIONS ===
# Process the button press and execute the appropriate action
action:
  # === EXTRACT EVENT DATA ===
  # Parse the ZHA event to determine which button was pressed and how
  - variables:
      endpoint_id:  '{{ trigger.event.data.endpoint_id | int }}'  # 1=left button, 2=right button
      command: '{{ trigger.event.data.command }}'                 # press type (single/double)

  # === BUTTON PRESS ROUTING ===
  # Route to the appropriate action based on button and press type
  - choose:
      # Left button single press (endpoint_id = 1, short press)
      - conditions:
          - '{{ command == ''remote_button_short_press'' and endpoint_id == 1}}'
        sequence: !input button_single_press_left
      
      # Left button double press (endpoint_id = 1, double press)
      - conditions:
          - '{{ command == ''remote_button_double_press'' and endpoint_id == 1}}'
        sequence: !input button_double_press_left
      
      # Right button single press (endpoint_id = 2, short press)
      - conditions:
          - '{{ command == ''remote_button_short_press'' and endpoint_id == 2}}'
        sequence: !input button_single_press_right
      
      # Right button double press (endpoint_id = 2, double press)
      - conditions:
          - '{{ command == ''remote_button_double_press'' and endpoint_id == 2}}'
        sequence: !input button_double_press_right

# === AUTOMATION CONFIGURATION ===
# Restart mode allows new button presses to interrupt running actions
# Silent overflow prevents errors if actions take too long        
mode: restart
max_exceeded: silent
